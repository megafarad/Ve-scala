package com.megafarad.ve_scala.english

import com.megafarad.ve_scala.Pos
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

import scala.language.implicitConversions

class StanfordNLPEnTest extends AnyFlatSpec with Matchers {

  implicit def parseTokens(rawTokens: Seq[String]): Seq[EnglishToken] = {
    rawTokens.foldLeft[Seq[EnglishToken]](Nil) {
      (parsedTokens, rawToken) => if (rawToken.isEmpty) parsedTokens match {
        case tokens :+ lastToken => tokens :+ lastToken.copy(sentenceEnding = true)
        case _ => Nil
      } else parsedTokens :+ EnglishTokenParser.parse(rawToken, sentenceEnding = false)
    }
  }

  behavior of "StanfordNLPEn"
  it should "keep all literals" in {
    val parser = new StanfordNLPEn(Seq("There there EX 0.857656", "once once RB 0.809237", "was be VBD 1",
      "a a DT 0.333333", "man man NN 0.980535", "from from IN 1", "X x NNP 1", "", "Who who WP 1", "took take VBD 1",
      "it it PRP 1", "upon upon IN 0.915152", "himself himself PRP 1", "to to TO 0.999909", "Y y NNP 1", "",
      "Z z NNP 1", ""))
    parser.words.map(_.word) should be (Seq("There", "once", "was", "a", "man", "from", "X", "Who", "took",
      "it", "upon", "himself", "to", "Y", "Z"))
  }

  it should "handle possessives correctly" in {
    val parser = new StanfordNLPEn("This is Jane's sentence.")
    val words = parser.words

    words.map(_.word) should be (Seq("This", "is", "Jane's", "sentence", "."))
    words.map(_.lemma) should be (Seq("this", "be", "Jane", "sentence", "."))
    words.map(_.partOfSpeech) should be (Seq(Pos.Determiner, Pos.Verb, Pos.ProperNoun, Pos.Noun, Pos.Punctuation))
  }

}
